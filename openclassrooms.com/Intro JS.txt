el objeto document nos da acceso a todos los elementos de la página
var h = document.head;
console.log(h);

var b= document.body;
console.log(b);

Para acceder a los nodos hijos usamos childnodes así:
console.log(document.body.childNodes);

var h1 = document.body.childNodes[1];

console.log(h1.parentNode);

console.log(document.parentNode); // No existe nodo padre de document

console.log(document.body.childNodes[5].childNodes[1]);
parecido a ...
console.log(document.getElementsByTagName("h2")[0]);

Seleccionar por clase "maravillas"
var maravillasElts = document.getElementsByClassName("maravillas");
console.log(maravillasElts[0]);

console.log(document.getElementById("nuevas"));

Seleccionar elementos siguiendo criterios complejos
Para li de clase "existe" dentro de un ul con id "antiguas"
console.log(document.querySelectorAll("#antiguas > .existe"));
querySelectorAll permite usar selectores css para seleccionar elementos
querySelector solo obtiene el primer elemento de la condicion anterior
console.log(document.querySelector("#nuevas > .existe"));

Para alterar o agregar elementos al DOM

var lenguajes = document.getElementById("lenguajes");
para esto se usa innerHTML así
lenguajes.innerHTML += '<li id="c">Lenguaje C</li>'
+= se usa para agregar un nuevo elemento con el contenido
o puede ser
Paso 1... Se define el tipo del elemento que se va a alterar
var javaElt = document.createElement("li")
Paso 2 se definen las atributos, id clase y contenido del elemento a alterar
Esto borra el valor actual y lo reemplaza
javaElt.setAttribute("id","java");
o tambien
javaElt.setAttribute("class","nombreclase");
Otra forma es:
javaElt.id = "java"; 
javaElt.className = "nombreClase";

Para agregar un nuevo valor sin borrar el actual...
javaElt.classList.add("nombreClase2"); 

Para agregar texto a un elemento usamos textContent...
javaElt.textContent = "Texto para agregar";

Ahora, para insertar este elemento en el DOM

lenguajes.appendChild(javaEtl); se añade al final de la lista

Para agregarlo en otro lugar: elemento a agregar, elemento antes de

lenguajes.insertBefore(javaEtl, document.getElementById("Rails"));
Esto agrega el elemento creado (javaETL) antes de "Rails"

Para agregarlo en otros sitios:
lenguajes.insertAdjacentElement("afterBegin", javaElt);

beforeBegin antes del propio elemento
afterBegin justo antes del primer hijo
beforeEnd justo despuès del ùltimo hijo
afterEnd Despuès del propio elemento

Para reemplazar y suprimir un nodo...
lenguajes.replaceChild(javaElt, document.getElementById("phyton");
reemplaza el elemento creado jaca por el elemento phyton

Para eliminar un nodo se usa
lenguajes.removeChild(document.getElementById("phyton");

Para cambiar el estilo a las paginas usando JS
var pElt = document.querySelector("p"); elige el primer parrafo
Los elementod del DOM tiene una propiedad llamada style que es un objeto que contiene todos los estilos del elemento o sea las propiedades css del elemento

pElt.style.color = "red";
pElt.style,margin = "50px";
Para las propiedades con palabras compuestas no se usa guion sino camellCase
pElt.style.fontFamily = "Arial";
pElt.style.backgroundColor = "black";

var parrafosElts = document.getElementsByTagName("p");
console.log(parrafosElts[0].style.color;
console.log(parrafosElts[1].style.color;
console.log(parrafosElts[2].style.color;
La propiedad style no puede acceder a los estilos dados en CSS. Para obtenerlo usamos...
var = styleP3 = getComputedStyle(parrafosElt[2]);
Una vez obtenida este metodo, podemos consultar sus propiedades CSS
console.log(styleP3.fontStyle);
console.log(styleP3.color);





